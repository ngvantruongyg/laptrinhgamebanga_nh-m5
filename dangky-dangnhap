import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;

public class LoginPanel extends JPanel implements ActionListener {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton, registerButton;
    private JLabel messageLabel;

    // Sử dụng HashMap để lưu tài khoản (username, password)
    private HashMap<String, String> userAccounts = new HashMap<>();

    private JFrame parentFrame;
    private Image background;

    public LoginPanel(JFrame parentFrame) {
        this.parentFrame = parentFrame;

        // Set layout to GridBagLayout for centering components
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(20, 20, 20, 20); // Add some spacing

        // Load background image
        background = new ImageIcon("src/resources/background.jpg").getImage();

        // Title Label (Centered at top)
        JLabel titleLabel = new JLabel("Đăng nhập hoặc Đăng ký", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 70));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        this.add(titleLabel, gbc);

        // Username Label and Field
        JLabel usernameLabel = new JLabel("Tên người dùng:");
        usernameLabel.setFont(new Font("Arial", Font.BOLD, 40));
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        this.add(usernameLabel, gbc);

        usernameField = new JTextField(20);
        usernameField.setFont(new Font("Arial", Font.PLAIN, 30)); // Font size for input field
        gbc.gridx = 1;
        gbc.gridy = 1;
        this.add(usernameField, gbc);

        // Password Label and Field
        JLabel passwordLabel = new JLabel("Mật khẩu:");
        passwordLabel.setFont(new Font("Arial", Font.BOLD, 40));
        gbc.gridx = 0;
        gbc.gridy = 2;
        this.add(passwordLabel, gbc);

        passwordField = new JPasswordField(20);
        passwordField.setFont(new Font("Arial", Font.PLAIN, 30)); // Font size for input field
        gbc.gridx = 1;
        gbc.gridy = 2;
        this.add(passwordField, gbc);

        // Buttons
        loginButton = new JButton("Đăng nhập");
        loginButton.setFont(new Font("Arial", Font.BOLD, 30)); // Larger font size
        loginButton.setPreferredSize(new Dimension(300, 80)); // Larger button size
        loginButton.addActionListener(this);
        gbc.gridx = 0;
        gbc.gridy = 3;
        this.add(loginButton, gbc);

        registerButton = new JButton("Đăng ký");
        registerButton.setFont(new Font("Arial", Font.BOLD, 30)); // Larger font size
        registerButton.setPreferredSize(new Dimension(300, 80)); // Larger button size
        registerButton.addActionListener(this);
        gbc.gridx = 1;
        gbc.gridy = 3;
        this.add(registerButton, gbc);

        // Message Label
        messageLabel = new JLabel("", SwingConstants.CENTER);
        messageLabel.setFont(new Font("Arial", Font.BOLD, 30));
        messageLabel.setForeground(Color.GREEN);
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        this.add(messageLabel, gbc);

        // Update the layout when the frame is resized
        parentFrame.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                revalidate();
                repaint();
            }
        });

        // Maximize the frame and center it
        parentFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        parentFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        parentFrame.setLocationRelativeTo(null); // Center the frame on the screen
        parentFrame.setVisible(true);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(background, 0, 0, getWidth(), getHeight(), this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String username = usernameField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();

        // Kiểm tra thông tin hợp lệ
        if (username.isEmpty() || password.isEmpty()) {
            messageLabel.setText("Tên Người Dùng và Mật Khẩu không được để trống!");
            return;
        }

        if (e.getSource() == registerButton) {
            if (userAccounts.containsKey(username)) {
                messageLabel.setForeground(Color.RED);
                messageLabel.setText("Tên Người Dùng đã tồn tại!");
            } else {
                userAccounts.put(username, password);
                messageLabel.setForeground(Color.GREEN);
                messageLabel.setText("Đăng ký thành công!");
            }
        } else if (e.getSource() == loginButton) {
            if (userAccounts.containsKey(username) && userAccounts.get(username).equals(password)) {
                messageLabel.setForeground(Color.GREEN);
                messageLabel.setText("Đăng nhập thành công!");
                startGame();
            } else {
                messageLabel.setForeground(Color.RED);
                messageLabel.setText("Tên Người Dùng hoặc Mật Khẩu không đúng!");
            }
        }
    }

    private void startGame() {
        parentFrame.getContentPane().removeAll();
        parentFrame.add(new GamePanel());
        parentFrame.revalidate();
        parentFrame.repaint();
    }
}
